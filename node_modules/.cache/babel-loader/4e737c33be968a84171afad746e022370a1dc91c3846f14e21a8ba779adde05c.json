{"ast":null,"code":"var _jsxFileName = \"/Users/abdulazim/Documents/web_stuff/real-projects/ielts_result/src/components/ScoresGrid.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport { logger } from '../services/logger';\nimport { Utils } from '../utils/helpers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ScoresGrid = ({\n  data\n}) => {\n  _s();\n  useEffect(() => {\n    var _data$conversations, _data$conversations2;\n    logger.logComponentEvent('ScoresGrid', 'mounted', {\n      hasConversations: !!(data !== null && data !== void 0 && (_data$conversations = data.conversations) !== null && _data$conversations !== void 0 && _data$conversations.length),\n      conversationCount: (data === null || data === void 0 ? void 0 : (_data$conversations2 = data.conversations) === null || _data$conversations2 === void 0 ? void 0 : _data$conversations2.length) || 0\n    });\n    return () => {\n      logger.logComponentEvent('ScoresGrid', 'unmounted');\n    };\n  }, [data]);\n  if (!data || !data.conversations || data.conversations.length === 0) {\n    logger.warn('COMPONENT', 'ScoresGrid received no conversation data');\n    return null;\n  }\n\n  // Get the first conversation's scores or calculate overall\n  const getOverallScores = () => {\n    if (data.conversations.length === 1) {\n      return data.conversations[0].ielts_scores || {};\n    }\n\n    // If multiple conversations, calculate averages\n    const scoreCategories = ['overall', 'pronunciation', 'fluency', 'vocabulary', 'grammar', 'coherence'];\n    const overallScores = {};\n    scoreCategories.forEach(category => {\n      const scores = data.conversations.map(conv => {\n        var _conv$ielts_scores;\n        return (_conv$ielts_scores = conv.ielts_scores) === null || _conv$ielts_scores === void 0 ? void 0 : _conv$ielts_scores[category];\n      }).filter(score => typeof score === 'number' && score > 0);\n      if (scores.length > 0) {\n        const average = scores.reduce((sum, score) => sum + score, 0) / scores.length;\n        overallScores[category] = Math.round(average * 10) / 10;\n      }\n    });\n    return overallScores;\n  };\n  const scores = getOverallScores();\n  const scoreCards = [{\n    title: 'Overall Score',\n    key: 'overall',\n    value: scores.overall,\n    description: Utils.getScoreDescription(scores.overall)\n  }, {\n    title: 'Pronunciation',\n    key: 'pronunciation',\n    value: scores.pronunciation,\n    description: 'Clarity and accuracy of speech sounds'\n  }, {\n    title: 'Fluency',\n    key: 'fluency',\n    value: scores.fluency,\n    description: 'Smoothness and naturalness of speech'\n  }, {\n    title: 'Vocabulary',\n    key: 'vocabulary',\n    value: scores.vocabulary,\n    description: 'Range and appropriateness of word choice'\n  }, {\n    title: 'Grammar',\n    key: 'grammar',\n    value: scores.grammar,\n    description: 'Accuracy and range of grammatical structures'\n  }, {\n    title: 'Coherence',\n    key: 'coherence',\n    value: scores.coherence,\n    description: 'Logical organization and connection of ideas'\n  }];\n  const ScoreCard = ({\n    title,\n    value,\n    description,\n    isMain = false\n  }) => {\n    const scoreColor = Utils.getScoreColor(value);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `score-card ${isMain ? 'main-score' : ''}`,\n      style: {\n        borderLeft: `4px solid ${scoreColor}`\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"score-value\",\n        style: {\n          color: scoreColor\n        },\n        title: `Score: ${value || 'N/A'}`,\n        children: value ? value.toFixed(1) : 'N/A'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"score-description\",\n        title: description,\n        children: Utils.truncateText(description, 50)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"scores-grid fade-in\",\n    children: scoreCards.map((card, index) => /*#__PURE__*/_jsxDEV(ScoreCard, {\n      title: card.title,\n      value: card.value,\n      description: card.description,\n      isMain: card.key === 'overall'\n    }, card.key, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 9\n  }, this);\n};\n_s(ScoresGrid, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = ScoresGrid;\nexport default ScoresGrid;\nvar _c;\n$RefreshReg$(_c, \"ScoresGrid\");","map":{"version":3,"names":["React","useEffect","logger","Utils","jsxDEV","_jsxDEV","ScoresGrid","data","_s","_data$conversations","_data$conversations2","logComponentEvent","hasConversations","conversations","length","conversationCount","warn","getOverallScores","ielts_scores","scoreCategories","overallScores","forEach","category","scores","map","conv","_conv$ielts_scores","filter","score","average","reduce","sum","Math","round","scoreCards","title","key","value","overall","description","getScoreDescription","pronunciation","fluency","vocabulary","grammar","coherence","ScoreCard","isMain","scoreColor","getScoreColor","className","style","borderLeft","children","fileName","_jsxFileName","lineNumber","columnNumber","color","toFixed","truncateText","card","index","_c","$RefreshReg$"],"sources":["/Users/abdulazim/Documents/web_stuff/real-projects/ielts_result/src/components/ScoresGrid.jsx"],"sourcesContent":["import React, { useEffect } from 'react';\nimport { logger } from '../services/logger';\nimport { Utils } from '../utils/helpers';\n\nconst ScoresGrid = ({ data }) => {\n    useEffect(() => {\n        logger.logComponentEvent('ScoresGrid', 'mounted', {\n            hasConversations: !!data?.conversations?.length,\n            conversationCount: data?.conversations?.length || 0\n        });\n        \n        return () => {\n            logger.logComponentEvent('ScoresGrid', 'unmounted');\n        };\n    }, [data]);\n\n    if (!data || !data.conversations || data.conversations.length === 0) {\n        logger.warn('COMPONENT', 'ScoresGrid received no conversation data');\n        return null;\n    }\n\n    // Get the first conversation's scores or calculate overall\n    const getOverallScores = () => {\n        if (data.conversations.length === 1) {\n            return data.conversations[0].ielts_scores || {};\n        }\n        \n        // If multiple conversations, calculate averages\n        const scoreCategories = ['overall', 'pronunciation', 'fluency', 'vocabulary', 'grammar', 'coherence'];\n        const overallScores = {};\n        \n        scoreCategories.forEach(category => {\n            const scores = data.conversations\n                .map(conv => conv.ielts_scores?.[category])\n                .filter(score => typeof score === 'number' && score > 0);\n            \n            if (scores.length > 0) {\n                const average = scores.reduce((sum, score) => sum + score, 0) / scores.length;\n                overallScores[category] = Math.round(average * 10) / 10;\n            }\n        });\n        \n        return overallScores;\n    };\n\n    const scores = getOverallScores();\n    \n    const scoreCards = [\n        {\n            title: 'Overall Score',\n            key: 'overall',\n            value: scores.overall,\n            description: Utils.getScoreDescription(scores.overall)\n        },\n        {\n            title: 'Pronunciation',\n            key: 'pronunciation', \n            value: scores.pronunciation,\n            description: 'Clarity and accuracy of speech sounds'\n        },\n        {\n            title: 'Fluency',\n            key: 'fluency',\n            value: scores.fluency,\n            description: 'Smoothness and naturalness of speech'\n        },\n        {\n            title: 'Vocabulary',\n            key: 'vocabulary',\n            value: scores.vocabulary,\n            description: 'Range and appropriateness of word choice'\n        },\n        {\n            title: 'Grammar',\n            key: 'grammar',\n            value: scores.grammar,\n            description: 'Accuracy and range of grammatical structures'\n        },\n        {\n            title: 'Coherence',\n            key: 'coherence',\n            value: scores.coherence,\n            description: 'Logical organization and connection of ideas'\n        }\n    ];\n\n    const ScoreCard = ({ title, value, description, isMain = false }) => {\n        const scoreColor = Utils.getScoreColor(value);\n        \n        return (\n            <div \n                className={`score-card ${isMain ? 'main-score' : ''}`}\n                style={{\n                    borderLeft: `4px solid ${scoreColor}`\n                }}\n            >\n                <h3>{title}</h3>\n                <div \n                    className=\"score-value\" \n                    style={{ color: scoreColor }}\n                    title={`Score: ${value || 'N/A'}`}\n                >\n                    {value ? value.toFixed(1) : 'N/A'}\n                </div>\n                <div className=\"score-description\" title={description}>\n                    {Utils.truncateText(description, 50)}\n                </div>\n            </div>\n        );\n    };\n\n    return (\n        <div className=\"scores-grid fade-in\">\n            {scoreCards.map((card, index) => (\n                <ScoreCard\n                    key={card.key}\n                    title={card.title}\n                    value={card.value}\n                    description={card.description}\n                    isMain={card.key === 'overall'}\n                />\n            ))}\n        </div>\n    );\n};\n\nexport default ScoresGrid;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}