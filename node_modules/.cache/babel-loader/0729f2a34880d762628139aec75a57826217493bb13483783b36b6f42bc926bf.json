{"ast":null,"code":"import { logger } from '../services/logger';\n\n// Utility functions for the IELTS Results app\nexport class Utils {\n  // Extract session code from URL\n  static getSessionCode() {\n    logger.debug('UTILS', 'Extracting session code from URL', {\n      url: window.location.href,\n      pathname: window.location.pathname,\n      hash: window.location.hash,\n      search: window.location.search\n    });\n    const path = window.location.pathname;\n    const hash = window.location.hash;\n\n    // Check for session code in path (/s{code}) - accepts alphanumeric, numbers, and some special chars\n    let match = path.match(/\\/s([a-zA-Z0-9_-]+)/);\n    if (match) {\n      const code = match[1];\n      logger.info('UTILS', 'Session code found in path', {\n        code,\n        fullMatch: match[0],\n        length: code.length,\n        chars: code.split('').join(',')\n      });\n      return code;\n    }\n\n    // Check for session code in hash (#s{code})\n    match = hash.match(/#s([a-zA-Z0-9_-]+)/);\n    if (match) {\n      const code = match[1];\n      logger.info('UTILS', 'Session code found in hash', {\n        code,\n        fullMatch: match[0],\n        length: code.length\n      });\n      return code;\n    }\n\n    // Check for session code as query parameter (?session={code})\n    const urlParams = new URLSearchParams(window.location.search);\n    const sessionParam = urlParams.get('session');\n    if (sessionParam) {\n      logger.info('UTILS', 'Session code found in query parameter', {\n        code: sessionParam,\n        length: sessionParam.length\n      });\n      return sessionParam;\n    }\n    logger.warn('UTILS', 'No session code found in URL', {\n      triedPath: path,\n      triedHash: hash,\n      triedQuery: window.location.search\n    });\n    return null;\n  }\n\n  // Format date with locale support\n  static formatDate(dateString, options = {}) {\n    if (!dateString) return 'N/A';\n    try {\n      const defaultOptions = {\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric',\n        hour: '2-digit',\n        minute: '2-digit'\n      };\n      const formatOptions = {\n        ...defaultOptions,\n        ...options\n      };\n      const date = new Date(dateString);\n      const formatted = date.toLocaleDateString('en-US', formatOptions);\n      logger.debug('UTILS', 'Date formatted', {\n        original: dateString,\n        formatted\n      });\n      return formatted;\n    } catch (error) {\n      logger.error('UTILS', 'Error formatting date', {\n        dateString,\n        error: error.message\n      });\n      return dateString;\n    }\n  }\n\n  // Format duration in a human-readable way\n  static formatDuration(seconds) {\n    if (!seconds || seconds < 0) return '0s';\n    const minutes = Math.floor(seconds / 60);\n    const remainingSeconds = seconds % 60;\n    let formatted;\n    if (minutes > 0) {\n      formatted = `${minutes}m ${remainingSeconds}s`;\n    } else {\n      formatted = `${remainingSeconds}s`;\n    }\n    logger.debug('UTILS', 'Duration formatted', {\n      original: seconds,\n      formatted\n    });\n    return formatted;\n  }\n\n  // Get score color based on value\n  static getScoreColor(score) {\n    if (score >= 8.5) return '#10b981'; // Emerald\n    if (score >= 7.5) return '#059669'; // Green\n    if (score >= 6.5) return '#65a30d'; // Lime\n    if (score >= 5.5) return '#d97706'; // Orange\n    if (score >= 4.5) return '#dc2626'; // Red\n    return '#6b7280'; // Gray\n  }\n\n  // Get score description based on IELTS bands\n  static getScoreDescription(score) {\n    if (score >= 9) return 'Expert User';\n    if (score >= 8) return 'Very Good User';\n    if (score >= 7) return 'Good User';\n    if (score >= 6) return 'Competent User';\n    if (score >= 5) return 'Modest User';\n    if (score >= 4) return 'Limited User';\n    if (score >= 3) return 'Extremely Limited User';\n    return 'Did not attempt the test';\n  }\n\n  // Validate session code format\n  static isValidSessionCode(code) {\n    if (!code || typeof code !== 'string') {\n      logger.debug('UTILS', 'Session code validation failed - not a string', {\n        code,\n        type: typeof code\n      });\n      return false;\n    }\n\n    // More flexible pattern: alphanumeric, 3-15 characters (to accommodate various formats)\n    const isValid = /^[a-zA-Z0-9]{3,15}$/.test(code);\n    logger.debug('UTILS', 'Session code validation', {\n      code,\n      isValid,\n      length: code.length\n    });\n    return isValid;\n  }\n\n  // Format percentage\n  static formatPercentage(value, decimals = 1) {\n    if (!value && value !== 0) return 'N/A';\n    return `${value.toFixed(decimals)}%`;\n  }\n\n  // Truncate text with ellipsis\n  static truncateText(text, maxLength = 100) {\n    if (!text || text.length <= maxLength) return text;\n    return text.substring(0, maxLength) + '...';\n  }\n\n  // Deep clone object\n  static deepClone(obj) {\n    try {\n      return JSON.parse(JSON.stringify(obj));\n    } catch (error) {\n      logger.error('UTILS', 'Error deep cloning object', {\n        error: error.message\n      });\n      return obj;\n    }\n  }\n\n  // Check if value exists and is not empty\n  static hasValue(value) {\n    return value !== null && value !== undefined && value !== '';\n  }\n\n  // Storage utilities\n  static setStorage(key, value, type = 'localStorage') {\n    try {\n      const storage = type === 'sessionStorage' ? sessionStorage : localStorage;\n      storage.setItem(key, JSON.stringify(value));\n      logger.debug('UTILS', 'Value stored', {\n        key,\n        type\n      });\n    } catch (error) {\n      logger.error('UTILS', 'Error storing value', {\n        key,\n        error: error.message\n      });\n    }\n  }\n  static getStorage(key, type = 'localStorage') {\n    try {\n      const storage = type === 'sessionStorage' ? sessionStorage : localStorage;\n      const value = storage.getItem(key);\n      const parsed = value ? JSON.parse(value) : null;\n      logger.debug('UTILS', 'Value retrieved', {\n        key,\n        type,\n        hasValue: !!parsed\n      });\n      return parsed;\n    } catch (error) {\n      logger.error('UTILS', 'Error retrieving value', {\n        key,\n        error: error.message\n      });\n      return null;\n    }\n  }\n  static removeStorage(key, type = 'localStorage') {\n    try {\n      const storage = type === 'sessionStorage' ? sessionStorage : localStorage;\n      storage.removeItem(key);\n      logger.debug('UTILS', 'Value removed', {\n        key,\n        type\n      });\n    } catch (error) {\n      logger.error('UTILS', 'Error removing value', {\n        key,\n        error: error.message\n      });\n    }\n  }\n\n  // URL utilities\n  static updateURL(sessionCode) {\n    if (!sessionCode) return;\n    const newURL = `/s${sessionCode}`;\n    if (window.location.pathname !== newURL) {\n      window.history.pushState({\n        sessionCode\n      }, '', newURL);\n      logger.info('UTILS', 'URL updated', {\n        newURL\n      });\n    }\n  }\n\n  // Error formatting\n  static formatError(error) {\n    if (!error) return 'Unknown error';\n    if (typeof error === 'string') return error;\n    if (error.message) return error.message;\n    if (error.error) return error.error;\n    return JSON.stringify(error);\n  }\n\n  // Check if device is mobile\n  static isMobile() {\n    return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);\n  }\n\n  // Get device type\n  static getDeviceType() {\n    const userAgent = navigator.userAgent;\n    if (/tablet|ipad|playbook|silk/i.test(userAgent)) {\n      return 'tablet';\n    }\n    if (/mobile|iphone|ipod|android|blackberry|opera|mini|windows\\sce|palm|smartphone|iemobile/i.test(userAgent)) {\n      return 'mobile';\n    }\n    return 'desktop';\n  }\n\n  // Format number with locale support\n  static formatNumber(number, options = {}) {\n    if (number === null || number === undefined) return 'N/A';\n    try {\n      return new Intl.NumberFormat('en-US', options).format(number);\n    } catch (error) {\n      logger.error('UTILS', 'Error formatting number', {\n        number,\n        error: error.message\n      });\n      return number.toString();\n    }\n  }\n\n  // Retry utility\n  static async retry(fn, maxAttempts = 3, initialDelay = 1000) {\n    let currentDelay = initialDelay;\n    for (let attempt = 1; attempt <= maxAttempts; attempt++) {\n      try {\n        logger.debug('UTILS', `Retry attempt ${attempt}/${maxAttempts}`);\n        return await fn();\n      } catch (error) {\n        if (attempt === maxAttempts) {\n          logger.error('UTILS', 'Max retry attempts reached', {\n            error: error.message\n          });\n          throw error;\n        }\n        logger.warn('UTILS', `Attempt ${attempt} failed, retrying in ${currentDelay}ms`, {\n          error: error.message\n        });\n        await new Promise(resolve => setTimeout(resolve, currentDelay));\n        currentDelay *= 2; // Exponential backoff\n      }\n    }\n  }\n}\nlogger.info('UTILS', 'Utils service initialized');","map":{"version":3,"names":["logger","Utils","getSessionCode","debug","url","window","location","href","pathname","hash","search","path","match","code","info","fullMatch","length","chars","split","join","urlParams","URLSearchParams","sessionParam","get","warn","triedPath","triedHash","triedQuery","formatDate","dateString","options","defaultOptions","year","month","day","hour","minute","formatOptions","date","Date","formatted","toLocaleDateString","original","error","message","formatDuration","seconds","minutes","Math","floor","remainingSeconds","getScoreColor","score","getScoreDescription","isValidSessionCode","type","isValid","test","formatPercentage","value","decimals","toFixed","truncateText","text","maxLength","substring","deepClone","obj","JSON","parse","stringify","hasValue","undefined","setStorage","key","storage","sessionStorage","localStorage","setItem","getStorage","getItem","parsed","removeStorage","removeItem","updateURL","sessionCode","newURL","history","pushState","formatError","isMobile","navigator","userAgent","getDeviceType","formatNumber","number","Intl","NumberFormat","format","toString","retry","fn","maxAttempts","initialDelay","currentDelay","attempt","Promise","resolve","setTimeout"],"sources":["/Users/abdulazim/Documents/web_stuff/real-projects/ielts_result/src/utils/helpers.js"],"sourcesContent":["import { logger } from '../services/logger';\n\n// Utility functions for the IELTS Results app\nexport class Utils {\n    // Extract session code from URL\n    static getSessionCode() {\n        logger.debug('UTILS', 'Extracting session code from URL', { \n            url: window.location.href,\n            pathname: window.location.pathname,\n            hash: window.location.hash,\n            search: window.location.search\n        });\n        \n        const path = window.location.pathname;\n        const hash = window.location.hash;\n        \n        // Check for session code in path (/s{code}) - accepts alphanumeric, numbers, and some special chars\n        let match = path.match(/\\/s([a-zA-Z0-9_-]+)/);\n        if (match) {\n            const code = match[1];\n            logger.info('UTILS', 'Session code found in path', { \n                code, \n                fullMatch: match[0],\n                length: code.length,\n                chars: code.split('').join(',')\n            });\n            return code;\n        }\n        \n        // Check for session code in hash (#s{code})\n        match = hash.match(/#s([a-zA-Z0-9_-]+)/);\n        if (match) {\n            const code = match[1];\n            logger.info('UTILS', 'Session code found in hash', { \n                code,\n                fullMatch: match[0],\n                length: code.length \n            });\n            return code;\n        }\n        \n        // Check for session code as query parameter (?session={code})\n        const urlParams = new URLSearchParams(window.location.search);\n        const sessionParam = urlParams.get('session');\n        if (sessionParam) {\n            logger.info('UTILS', 'Session code found in query parameter', { \n                code: sessionParam,\n                length: sessionParam.length \n            });\n            return sessionParam;\n        }\n        \n        logger.warn('UTILS', 'No session code found in URL', {\n            triedPath: path,\n            triedHash: hash,\n            triedQuery: window.location.search\n        });\n        return null;\n    }\n\n    // Format date with locale support\n    static formatDate(dateString, options = {}) {\n        if (!dateString) return 'N/A';\n        \n        try {\n            const defaultOptions = {\n                year: 'numeric',\n                month: 'long',\n                day: 'numeric',\n                hour: '2-digit',\n                minute: '2-digit'\n            };\n            \n            const formatOptions = { ...defaultOptions, ...options };\n            const date = new Date(dateString);\n            const formatted = date.toLocaleDateString('en-US', formatOptions);\n            \n            logger.debug('UTILS', 'Date formatted', { original: dateString, formatted });\n            return formatted;\n        } catch (error) {\n            logger.error('UTILS', 'Error formatting date', { dateString, error: error.message });\n            return dateString;\n        }\n    }\n\n    // Format duration in a human-readable way\n    static formatDuration(seconds) {\n        if (!seconds || seconds < 0) return '0s';\n        \n        const minutes = Math.floor(seconds / 60);\n        const remainingSeconds = seconds % 60;\n        \n        let formatted;\n        if (minutes > 0) {\n            formatted = `${minutes}m ${remainingSeconds}s`;\n        } else {\n            formatted = `${remainingSeconds}s`;\n        }\n        \n        logger.debug('UTILS', 'Duration formatted', { original: seconds, formatted });\n        return formatted;\n    }\n\n    // Get score color based on value\n    static getScoreColor(score) {\n        if (score >= 8.5) return '#10b981'; // Emerald\n        if (score >= 7.5) return '#059669'; // Green\n        if (score >= 6.5) return '#65a30d'; // Lime\n        if (score >= 5.5) return '#d97706'; // Orange\n        if (score >= 4.5) return '#dc2626'; // Red\n        return '#6b7280'; // Gray\n    }\n\n    // Get score description based on IELTS bands\n    static getScoreDescription(score) {\n        if (score >= 9) return 'Expert User';\n        if (score >= 8) return 'Very Good User';\n        if (score >= 7) return 'Good User';\n        if (score >= 6) return 'Competent User';\n        if (score >= 5) return 'Modest User';\n        if (score >= 4) return 'Limited User';\n        if (score >= 3) return 'Extremely Limited User';\n        return 'Did not attempt the test';\n    }\n\n    // Validate session code format\n    static isValidSessionCode(code) {\n        if (!code || typeof code !== 'string') {\n            logger.debug('UTILS', 'Session code validation failed - not a string', { code, type: typeof code });\n            return false;\n        }\n        \n        // More flexible pattern: alphanumeric, 3-15 characters (to accommodate various formats)\n        const isValid = /^[a-zA-Z0-9]{3,15}$/.test(code);\n        \n        logger.debug('UTILS', 'Session code validation', { code, isValid, length: code.length });\n        return isValid;\n    }\n\n    // Format percentage\n    static formatPercentage(value, decimals = 1) {\n        if (!value && value !== 0) return 'N/A';\n        return `${value.toFixed(decimals)}%`;\n    }\n\n    // Truncate text with ellipsis\n    static truncateText(text, maxLength = 100) {\n        if (!text || text.length <= maxLength) return text;\n        return text.substring(0, maxLength) + '...';\n    }\n\n    // Deep clone object\n    static deepClone(obj) {\n        try {\n            return JSON.parse(JSON.stringify(obj));\n        } catch (error) {\n            logger.error('UTILS', 'Error deep cloning object', { error: error.message });\n            return obj;\n        }\n    }\n\n    // Check if value exists and is not empty\n    static hasValue(value) {\n        return value !== null && value !== undefined && value !== '';\n    }\n\n    // Storage utilities\n    static setStorage(key, value, type = 'localStorage') {\n        try {\n            const storage = type === 'sessionStorage' ? sessionStorage : localStorage;\n            storage.setItem(key, JSON.stringify(value));\n            logger.debug('UTILS', 'Value stored', { key, type });\n        } catch (error) {\n            logger.error('UTILS', 'Error storing value', { key, error: error.message });\n        }\n    }\n\n    static getStorage(key, type = 'localStorage') {\n        try {\n            const storage = type === 'sessionStorage' ? sessionStorage : localStorage;\n            const value = storage.getItem(key);\n            const parsed = value ? JSON.parse(value) : null;\n            logger.debug('UTILS', 'Value retrieved', { key, type, hasValue: !!parsed });\n            return parsed;\n        } catch (error) {\n            logger.error('UTILS', 'Error retrieving value', { key, error: error.message });\n            return null;\n        }\n    }\n\n    static removeStorage(key, type = 'localStorage') {\n        try {\n            const storage = type === 'sessionStorage' ? sessionStorage : localStorage;\n            storage.removeItem(key);\n            logger.debug('UTILS', 'Value removed', { key, type });\n        } catch (error) {\n            logger.error('UTILS', 'Error removing value', { key, error: error.message });\n        }\n    }\n\n    // URL utilities\n    static updateURL(sessionCode) {\n        if (!sessionCode) return;\n        \n        const newURL = `/s${sessionCode}`;\n        if (window.location.pathname !== newURL) {\n            window.history.pushState({ sessionCode }, '', newURL);\n            logger.info('UTILS', 'URL updated', { newURL });\n        }\n    }\n\n    // Error formatting\n    static formatError(error) {\n        if (!error) return 'Unknown error';\n        \n        if (typeof error === 'string') return error;\n        if (error.message) return error.message;\n        if (error.error) return error.error;\n        \n        return JSON.stringify(error);\n    }\n\n    // Check if device is mobile\n    static isMobile() {\n        return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);\n    }\n\n    // Get device type\n    static getDeviceType() {\n        const userAgent = navigator.userAgent;\n        if (/tablet|ipad|playbook|silk/i.test(userAgent)) {\n            return 'tablet';\n        }\n        if (/mobile|iphone|ipod|android|blackberry|opera|mini|windows\\sce|palm|smartphone|iemobile/i.test(userAgent)) {\n            return 'mobile';\n        }\n        return 'desktop';\n    }\n\n    // Format number with locale support\n    static formatNumber(number, options = {}) {\n        if (number === null || number === undefined) return 'N/A';\n        \n        try {\n            return new Intl.NumberFormat('en-US', options).format(number);\n        } catch (error) {\n            logger.error('UTILS', 'Error formatting number', { number, error: error.message });\n            return number.toString();\n        }\n    }\n\n    // Retry utility\n    static async retry(fn, maxAttempts = 3, initialDelay = 1000) {\n        let currentDelay = initialDelay;\n        \n        for (let attempt = 1; attempt <= maxAttempts; attempt++) {\n            try {\n                logger.debug('UTILS', `Retry attempt ${attempt}/${maxAttempts}`);\n                return await fn();\n            } catch (error) {\n                if (attempt === maxAttempts) {\n                    logger.error('UTILS', 'Max retry attempts reached', { error: error.message });\n                    throw error;\n                }\n                \n                logger.warn('UTILS', `Attempt ${attempt} failed, retrying in ${currentDelay}ms`, { error: error.message });\n                await new Promise(resolve => setTimeout(resolve, currentDelay));\n                currentDelay *= 2; // Exponential backoff\n            }\n        }\n    }\n}\n\nlogger.info('UTILS', 'Utils service initialized');"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}