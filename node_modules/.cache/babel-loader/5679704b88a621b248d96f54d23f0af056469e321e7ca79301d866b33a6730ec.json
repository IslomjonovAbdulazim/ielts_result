{"ast":null,"code":"import { logger } from './logger';\nimport { Utils } from '../utils/helpers';\n\n// API service for IELTS Results app\nclass ApiService {\n  constructor() {\n    this.baseURL = 'https://ieltsspeakingbot-production.up.railway.app';\n    this.defaultTimeout = 15000; // 15 seconds\n    this.retryAttempts = 3;\n    this.retryDelay = 1000; // 1 second\n\n    logger.info('API', 'ApiService initialized', {\n      baseURL: this.baseURL\n    });\n  }\n\n  // Main method to fetch session data\n  async fetchSessionData(sessionCode) {\n    logger.info('API', 'Fetching session data', {\n      sessionCode\n    });\n    if (!sessionCode) {\n      const error = new Error('Session code is required');\n      logger.error('API', 'No session code provided');\n      throw error;\n    }\n    if (!Utils.isValidSessionCode(sessionCode)) {\n      const error = new Error('Invalid session code format');\n      logger.error('API', 'Invalid session code format', {\n        sessionCode\n      });\n      throw error;\n    }\n    const timer = logger.startTimer('fetchSessionData');\n    try {\n      var _response$conversatio, _response$conversatio2;\n      const url = `${this.baseURL}/session/${sessionCode}`;\n      logger.info('API', 'Making API request', {\n        url\n      });\n      const response = await Utils.retry(() => this.makeRequest(url), this.retryAttempts, this.retryDelay);\n      timer.stop();\n\n      // Validate response structure\n      this.validateSessionData(response);\n      logger.info('API', 'Session data fetched successfully', {\n        sessionCode,\n        hasConversations: ((_response$conversatio = response.conversations) === null || _response$conversatio === void 0 ? void 0 : _response$conversatio.length) > 0,\n        totalConversations: ((_response$conversatio2 = response.conversations) === null || _response$conversatio2 === void 0 ? void 0 : _response$conversatio2.length) || 0\n      });\n      return response;\n    } catch (error) {\n      timer.stop();\n\n      // Enhanced error handling\n      const enhancedError = this.handleApiError(error, sessionCode);\n      logger.error('API', 'Failed to fetch session data', {\n        sessionCode,\n        error: enhancedError.message,\n        status: enhancedError.status,\n        originalError: error.message\n      });\n      throw enhancedError;\n    }\n  }\n\n  // Low-level request method\n  async makeRequest(url, options = {}) {\n    const controller = new AbortController();\n    const timeoutId = setTimeout(() => controller.abort(), this.defaultTimeout);\n    const defaultOptions = {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      },\n      signal: controller.signal\n    };\n    const requestOptions = {\n      ...defaultOptions,\n      ...options\n    };\n    const startTime = performance.now();\n    try {\n      logger.debug('API', 'Making HTTP request', {\n        url,\n        method: requestOptions.method\n      });\n      const response = await fetch(url, requestOptions);\n      const endTime = performance.now();\n      const duration = endTime - startTime;\n      clearTimeout(timeoutId);\n      logger.logApiCall(requestOptions.method, url, response.status, duration, requestOptions.body, null // Response data will be logged separately\n      );\n      if (!response.ok) {\n        const errorText = await response.text().catch(() => 'Unable to read error response');\n        const error = new Error(`HTTP ${response.status}: ${response.statusText}`);\n        error.status = response.status;\n        error.response = response;\n        error.responseText = errorText;\n        throw error;\n      }\n      const contentType = response.headers.get('content-type');\n      if (!contentType || !contentType.includes('application/json')) {\n        logger.warn('API', 'Response is not JSON', {\n          contentType,\n          url\n        });\n      }\n      const data = await response.json();\n      logger.debug('API', 'Request successful', {\n        url,\n        status: response.status,\n        duration: `${duration.toFixed(2)}ms`,\n        dataSize: JSON.stringify(data).length + ' bytes'\n      });\n      return data;\n    } catch (error) {\n      clearTimeout(timeoutId);\n      const endTime = performance.now();\n      const duration = endTime - startTime;\n      if (error.name === 'AbortError') {\n        logger.error('API', 'Request timeout', {\n          url,\n          timeout: this.defaultTimeout\n        });\n        const timeoutError = new Error('Request timeout');\n        timeoutError.code = 'TIMEOUT';\n        throw timeoutError;\n      }\n      logger.logApiCall(requestOptions.method, url, error.status || 0, duration, requestOptions.body, error.message);\n      throw error;\n    }\n  }\n\n  // Validate session data structure\n  validateSessionData(data) {\n    logger.debug('API', 'Validating session data structure');\n    if (!data || typeof data !== 'object') {\n      throw new Error('Invalid response: data is not an object');\n    }\n\n    // Required fields validation\n    const requiredFields = ['session_info', 'user_info', 'conversations'];\n    for (const field of requiredFields) {\n      if (!data[field]) {\n        logger.warn('API', `Missing required field: ${field}`);\n      }\n    }\n\n    // Validate session_info\n    if (data.session_info) {\n      const sessionRequiredFields = ['id', 'status'];\n      for (const field of sessionRequiredFields) {\n        if (!data.session_info[field]) {\n          logger.warn('API', `Missing session_info field: ${field}`);\n        }\n      }\n    }\n\n    // Validate conversations array\n    if (data.conversations && Array.isArray(data.conversations)) {\n      logger.info('API', 'Validating conversations', {\n        count: data.conversations.length\n      });\n      data.conversations.forEach((conv, index) => {\n        if (!conv.question_text) {\n          logger.warn('API', `Missing question_text in conversation ${index}`);\n        }\n        if (!conv.transcript) {\n          logger.warn('API', `Missing transcript in conversation ${index}`);\n        }\n        if (!conv.ielts_scores) {\n          logger.warn('API', `Missing ielts_scores in conversation ${index}`);\n        }\n      });\n    }\n    logger.info('API', 'Session data validation completed');\n  }\n\n  // Enhanced error handling\n  handleApiError(error, sessionCode) {\n    let message = 'An error occurred while fetching the results';\n    let code = 'UNKNOWN_ERROR';\n    let status = error.status || 0;\n    if (error.name === 'AbortError' || error.code === 'TIMEOUT') {\n      message = 'Request timeout. Please check your internet connection and try again.';\n      code = 'TIMEOUT';\n    } else if (error.status === 404) {\n      message = 'Results not found for this session. Please check the session code.';\n      code = 'NOT_FOUND';\n    } else if (error.status === 400) {\n      message = 'Invalid session code format.';\n      code = 'BAD_REQUEST';\n    } else if (error.status === 403) {\n      message = 'Access denied. You may not have permission to view these results.';\n      code = 'FORBIDDEN';\n    } else if (error.status === 429) {\n      message = 'Too many requests. Please wait a moment and try again.';\n      code = 'RATE_LIMITED';\n    } else if (error.status >= 500) {\n      message = 'Server error. Please try again later.';\n      code = 'SERVER_ERROR';\n    } else if (!navigator.onLine) {\n      message = 'No internet connection. Please check your connection and try again.';\n      code = 'NO_CONNECTION';\n    } else if (error.message.includes('Failed to fetch')) {\n      message = 'Unable to connect to the server. Please try again later.';\n      code = 'NETWORK_ERROR';\n    }\n    const enhancedError = new Error(message);\n    enhancedError.code = code;\n    enhancedError.status = status;\n    enhancedError.sessionCode = sessionCode;\n    enhancedError.originalError = error;\n    return enhancedError;\n  }\n\n  // Method to get cached session data\n  getCachedSessionData(sessionCode, maxAge = 5 * 60 * 1000) {\n    // 5 minutes default\n    const cached = Utils.getStorage(`session_${sessionCode}`, 'sessionStorage');\n    if (!cached) {\n      logger.debug('API', 'No cached data found', {\n        sessionCode\n      });\n      return null;\n    }\n    const isExpired = Date.now() - cached.timestamp > maxAge;\n    if (isExpired) {\n      logger.debug('API', 'Cached data expired', {\n        sessionCode\n      });\n      Utils.removeStorage(`session_${sessionCode}`, 'sessionStorage');\n      return null;\n    }\n    logger.info('API', 'Using cached session data', {\n      sessionCode\n    });\n    return cached.data;\n  }\n\n  // Method to cache session data\n  cacheSessionData(sessionCode, data) {\n    Utils.setStorage(`session_${sessionCode}`, {\n      data,\n      timestamp: Date.now()\n    }, 'sessionStorage');\n    logger.info('API', 'Session data cached', {\n      sessionCode\n    });\n  }\n\n  // Method to clear all cached data\n  clearCache() {\n    logger.info('API', 'Clearing API cache');\n\n    // Clear all session storage items that start with 'session_'\n    for (let i = sessionStorage.length - 1; i >= 0; i--) {\n      const key = sessionStorage.key(i);\n      if (key && key.startsWith('session_')) {\n        sessionStorage.removeItem(key);\n      }\n    }\n    logger.info('API', 'API cache cleared');\n  }\n\n  // Method to check API health\n  async checkApiHealth() {\n    logger.info('API', 'Checking API health');\n    try {\n      const url = `${this.baseURL}/health`;\n      const response = await this.makeRequest(url);\n      logger.info('API', 'API health check successful', response);\n      return true;\n    } catch (error) {\n      logger.error('API', 'API health check failed', {\n        error: error.message\n      });\n      return false;\n    }\n  }\n\n  // Method to get API statistics\n  getApiStats() {\n    const stats = {\n      baseURL: this.baseURL,\n      defaultTimeout: this.defaultTimeout,\n      retryAttempts: this.retryAttempts,\n      retryDelay: this.retryDelay,\n      isOnline: navigator.onLine,\n      userAgent: navigator.userAgent\n    };\n    logger.debug('API', 'API statistics', stats);\n    return stats;\n  }\n}\n\n// Create and export API service instance\nexport const apiService = new ApiService();\nlogger.info('API', 'API service initialized successfully');","map":{"version":3,"names":["logger","Utils","ApiService","constructor","baseURL","defaultTimeout","retryAttempts","retryDelay","info","fetchSessionData","sessionCode","error","Error","isValidSessionCode","timer","startTimer","_response$conversatio","_response$conversatio2","url","response","retry","makeRequest","stop","validateSessionData","hasConversations","conversations","length","totalConversations","enhancedError","handleApiError","message","status","originalError","options","controller","AbortController","timeoutId","setTimeout","abort","defaultOptions","method","headers","signal","requestOptions","startTime","performance","now","debug","fetch","endTime","duration","clearTimeout","logApiCall","body","ok","errorText","text","catch","statusText","responseText","contentType","get","includes","warn","data","json","toFixed","dataSize","JSON","stringify","name","timeout","timeoutError","code","requiredFields","field","session_info","sessionRequiredFields","Array","isArray","count","forEach","conv","index","question_text","transcript","ielts_scores","navigator","onLine","getCachedSessionData","maxAge","cached","getStorage","isExpired","Date","timestamp","removeStorage","cacheSessionData","setStorage","clearCache","i","sessionStorage","key","startsWith","removeItem","checkApiHealth","getApiStats","stats","isOnline","userAgent","apiService"],"sources":["/Users/abdulazim/Documents/web_stuff/real-projects/ielts_result/src/services/apiService.js"],"sourcesContent":["import { logger } from './logger';\nimport { Utils } from '../utils/helpers';\n\n// API service for IELTS Results app\nclass ApiService {\n    constructor() {\n        this.baseURL = 'https://ieltsspeakingbot-production.up.railway.app';\n        this.defaultTimeout = 15000; // 15 seconds\n        this.retryAttempts = 3;\n        this.retryDelay = 1000; // 1 second\n        \n        logger.info('API', 'ApiService initialized', { baseURL: this.baseURL });\n    }\n\n    // Main method to fetch session data\n    async fetchSessionData(sessionCode) {\n        logger.info('API', 'Fetching session data', { sessionCode });\n        \n        if (!sessionCode) {\n            const error = new Error('Session code is required');\n            logger.error('API', 'No session code provided');\n            throw error;\n        }\n\n        if (!Utils.isValidSessionCode(sessionCode)) {\n            const error = new Error('Invalid session code format');\n            logger.error('API', 'Invalid session code format', { sessionCode });\n            throw error;\n        }\n\n        const timer = logger.startTimer('fetchSessionData');\n        \n        try {\n            const url = `${this.baseURL}/session/${sessionCode}`;\n            logger.info('API', 'Making API request', { url });\n\n            const response = await Utils.retry(\n                () => this.makeRequest(url),\n                this.retryAttempts,\n                this.retryDelay\n            );\n\n            timer.stop();\n            \n            // Validate response structure\n            this.validateSessionData(response);\n            \n            logger.info('API', 'Session data fetched successfully', {\n                sessionCode,\n                hasConversations: response.conversations?.length > 0,\n                totalConversations: response.conversations?.length || 0\n            });\n\n            return response;\n            \n        } catch (error) {\n            timer.stop();\n            \n            // Enhanced error handling\n            const enhancedError = this.handleApiError(error, sessionCode);\n            logger.error('API', 'Failed to fetch session data', {\n                sessionCode,\n                error: enhancedError.message,\n                status: enhancedError.status,\n                originalError: error.message\n            });\n            \n            throw enhancedError;\n        }\n    }\n\n    // Low-level request method\n    async makeRequest(url, options = {}) {\n        const controller = new AbortController();\n        const timeoutId = setTimeout(() => controller.abort(), this.defaultTimeout);\n\n        const defaultOptions = {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json'\n            },\n            signal: controller.signal\n        };\n\n        const requestOptions = { ...defaultOptions, ...options };\n        const startTime = performance.now();\n\n        try {\n            logger.debug('API', 'Making HTTP request', { url, method: requestOptions.method });\n\n            const response = await fetch(url, requestOptions);\n            const endTime = performance.now();\n            const duration = endTime - startTime;\n\n            clearTimeout(timeoutId);\n\n            logger.logApiCall(\n                requestOptions.method,\n                url,\n                response.status,\n                duration,\n                requestOptions.body,\n                null // Response data will be logged separately\n            );\n\n            if (!response.ok) {\n                const errorText = await response.text().catch(() => 'Unable to read error response');\n                const error = new Error(`HTTP ${response.status}: ${response.statusText}`);\n                error.status = response.status;\n                error.response = response;\n                error.responseText = errorText;\n                \n                throw error;\n            }\n\n            const contentType = response.headers.get('content-type');\n            if (!contentType || !contentType.includes('application/json')) {\n                logger.warn('API', 'Response is not JSON', { contentType, url });\n            }\n\n            const data = await response.json();\n            \n            logger.debug('API', 'Request successful', {\n                url,\n                status: response.status,\n                duration: `${duration.toFixed(2)}ms`,\n                dataSize: JSON.stringify(data).length + ' bytes'\n            });\n\n            return data;\n\n        } catch (error) {\n            clearTimeout(timeoutId);\n            const endTime = performance.now();\n            const duration = endTime - startTime;\n\n            if (error.name === 'AbortError') {\n                logger.error('API', 'Request timeout', { url, timeout: this.defaultTimeout });\n                const timeoutError = new Error('Request timeout');\n                timeoutError.code = 'TIMEOUT';\n                throw timeoutError;\n            }\n\n            logger.logApiCall(\n                requestOptions.method,\n                url,\n                error.status || 0,\n                duration,\n                requestOptions.body,\n                error.message\n            );\n\n            throw error;\n        }\n    }\n\n    // Validate session data structure\n    validateSessionData(data) {\n        logger.debug('API', 'Validating session data structure');\n\n        if (!data || typeof data !== 'object') {\n            throw new Error('Invalid response: data is not an object');\n        }\n\n        // Required fields validation\n        const requiredFields = ['session_info', 'user_info', 'conversations'];\n        for (const field of requiredFields) {\n            if (!data[field]) {\n                logger.warn('API', `Missing required field: ${field}`);\n            }\n        }\n\n        // Validate session_info\n        if (data.session_info) {\n            const sessionRequiredFields = ['id', 'status'];\n            for (const field of sessionRequiredFields) {\n                if (!data.session_info[field]) {\n                    logger.warn('API', `Missing session_info field: ${field}`);\n                }\n            }\n        }\n\n        // Validate conversations array\n        if (data.conversations && Array.isArray(data.conversations)) {\n            logger.info('API', 'Validating conversations', { count: data.conversations.length });\n            \n            data.conversations.forEach((conv, index) => {\n                if (!conv.question_text) {\n                    logger.warn('API', `Missing question_text in conversation ${index}`);\n                }\n                if (!conv.transcript) {\n                    logger.warn('API', `Missing transcript in conversation ${index}`);\n                }\n                if (!conv.ielts_scores) {\n                    logger.warn('API', `Missing ielts_scores in conversation ${index}`);\n                }\n            });\n        }\n\n        logger.info('API', 'Session data validation completed');\n    }\n\n    // Enhanced error handling\n    handleApiError(error, sessionCode) {\n        let message = 'An error occurred while fetching the results';\n        let code = 'UNKNOWN_ERROR';\n        let status = error.status || 0;\n\n        if (error.name === 'AbortError' || error.code === 'TIMEOUT') {\n            message = 'Request timeout. Please check your internet connection and try again.';\n            code = 'TIMEOUT';\n        } else if (error.status === 404) {\n            message = 'Results not found for this session. Please check the session code.';\n            code = 'NOT_FOUND';\n        } else if (error.status === 400) {\n            message = 'Invalid session code format.';\n            code = 'BAD_REQUEST';\n        } else if (error.status === 403) {\n            message = 'Access denied. You may not have permission to view these results.';\n            code = 'FORBIDDEN';\n        } else if (error.status === 429) {\n            message = 'Too many requests. Please wait a moment and try again.';\n            code = 'RATE_LIMITED';\n        } else if (error.status >= 500) {\n            message = 'Server error. Please try again later.';\n            code = 'SERVER_ERROR';\n        } else if (!navigator.onLine) {\n            message = 'No internet connection. Please check your connection and try again.';\n            code = 'NO_CONNECTION';\n        } else if (error.message.includes('Failed to fetch')) {\n            message = 'Unable to connect to the server. Please try again later.';\n            code = 'NETWORK_ERROR';\n        }\n\n        const enhancedError = new Error(message);\n        enhancedError.code = code;\n        enhancedError.status = status;\n        enhancedError.sessionCode = sessionCode;\n        enhancedError.originalError = error;\n\n        return enhancedError;\n    }\n\n    // Method to get cached session data\n    getCachedSessionData(sessionCode, maxAge = 5 * 60 * 1000) { // 5 minutes default\n        const cached = Utils.getStorage(`session_${sessionCode}`, 'sessionStorage');\n        \n        if (!cached) {\n            logger.debug('API', 'No cached data found', { sessionCode });\n            return null;\n        }\n\n        const isExpired = Date.now() - cached.timestamp > maxAge;\n        if (isExpired) {\n            logger.debug('API', 'Cached data expired', { sessionCode });\n            Utils.removeStorage(`session_${sessionCode}`, 'sessionStorage');\n            return null;\n        }\n\n        logger.info('API', 'Using cached session data', { sessionCode });\n        return cached.data;\n    }\n\n    // Method to cache session data\n    cacheSessionData(sessionCode, data) {\n        Utils.setStorage(`session_${sessionCode}`, {\n            data,\n            timestamp: Date.now()\n        }, 'sessionStorage');\n        \n        logger.info('API', 'Session data cached', { sessionCode });\n    }\n\n    // Method to clear all cached data\n    clearCache() {\n        logger.info('API', 'Clearing API cache');\n        \n        // Clear all session storage items that start with 'session_'\n        for (let i = sessionStorage.length - 1; i >= 0; i--) {\n            const key = sessionStorage.key(i);\n            if (key && key.startsWith('session_')) {\n                sessionStorage.removeItem(key);\n            }\n        }\n        \n        logger.info('API', 'API cache cleared');\n    }\n\n    // Method to check API health\n    async checkApiHealth() {\n        logger.info('API', 'Checking API health');\n        \n        try {\n            const url = `${this.baseURL}/health`;\n            const response = await this.makeRequest(url);\n            \n            logger.info('API', 'API health check successful', response);\n            return true;\n        } catch (error) {\n            logger.error('API', 'API health check failed', { error: error.message });\n            return false;\n        }\n    }\n\n    // Method to get API statistics\n    getApiStats() {\n        const stats = {\n            baseURL: this.baseURL,\n            defaultTimeout: this.defaultTimeout,\n            retryAttempts: this.retryAttempts,\n            retryDelay: this.retryDelay,\n            isOnline: navigator.onLine,\n            userAgent: navigator.userAgent\n        };\n\n        logger.debug('API', 'API statistics', stats);\n        return stats;\n    }\n}\n\n// Create and export API service instance\nexport const apiService = new ApiService();\n\nlogger.info('API', 'API service initialized successfully');"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}