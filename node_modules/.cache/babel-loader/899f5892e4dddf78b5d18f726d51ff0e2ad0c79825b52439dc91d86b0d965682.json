{"ast":null,"code":"// Logger service for React app\nclass Logger {\n  constructor() {\n    this.logLevel = 'INFO';\n    this.enableConsoleLog = true;\n    this.logHistory = [];\n    this.maxHistorySize = 1000;\n  }\n  setLogLevel(level) {\n    this.logLevel = level;\n    this.log('INFO', 'Logger', `Log level set to: ${level}`);\n  }\n  log(level, category, message, data = null) {\n    const timestamp = new Date().toISOString();\n    const logEntry = {\n      timestamp,\n      level,\n      category,\n      message,\n      data,\n      userAgent: navigator.userAgent,\n      url: window.location.href\n    };\n\n    // Add to history\n    this.logHistory.push(logEntry);\n    if (this.logHistory.length > this.maxHistorySize) {\n      this.logHistory = this.logHistory.slice(-this.maxHistorySize);\n    }\n\n    // Console logging\n    if (this.enableConsoleLog) {\n      const logMessage = `[${timestamp}] [${level}] [${category}] ${message}`;\n      switch (level) {\n        case 'ERROR':\n          console.error(logMessage, data || '');\n          break;\n        case 'WARN':\n          console.warn(logMessage, data || '');\n          break;\n        case 'INFO':\n          console.info(logMessage, data || '');\n          break;\n        case 'DEBUG':\n          console.debug(logMessage, data || '');\n          break;\n        default:\n          console.log(logMessage, data || '');\n      }\n    }\n\n    // Send critical errors to external service (if configured)\n    if (level === 'ERROR') {\n      this.sendErrorToExternalService(logEntry);\n    }\n  }\n  info(category, message, data = null) {\n    this.log('INFO', category, message, data);\n  }\n  warn(category, message, data = null) {\n    this.log('WARN', category, message, data);\n  }\n  error(category, message, data = null) {\n    this.log('ERROR', category, message, data);\n  }\n  debug(category, message, data = null) {\n    this.log('DEBUG', category, message, data);\n  }\n\n  // Performance logging\n  startTimer(timerName) {\n    const startTime = performance.now();\n    this.info('PERFORMANCE', `Timer started: ${timerName}`, {\n      startTime\n    });\n    return {\n      stop: () => {\n        const endTime = performance.now();\n        const duration = endTime - startTime;\n        this.info('PERFORMANCE', `Timer stopped: ${timerName}`, {\n          startTime,\n          endTime,\n          duration: `${duration.toFixed(2)}ms`\n        });\n        return duration;\n      }\n    };\n  }\n\n  // User interaction logging\n  logUserAction(action, details = {}) {\n    this.info('USER_ACTION', action, {\n      ...details,\n      timestamp: Date.now(),\n      sessionId: this.getSessionId()\n    });\n  }\n\n  // API call logging\n  logApiCall(method, url, status, duration, requestData = null, responseData = null) {\n    const level = status >= 400 ? 'ERROR' : 'INFO';\n    this.log(level, 'API_CALL', `${method} ${url} - ${status}`, {\n      method,\n      url,\n      status,\n      duration: `${duration}ms`,\n      requestData: requestData ? JSON.stringify(requestData).slice(0, 500) : null,\n      responseData: responseData ? JSON.stringify(responseData).slice(0, 500) : null\n    });\n  }\n\n  // Component lifecycle logging\n  logComponentEvent(componentName, event, data = {}) {\n    this.debug('COMPONENT', `${componentName}: ${event}`, data);\n  }\n\n  // Error boundary logging\n  logComponentError(componentName, error, errorInfo) {\n    this.error('COMPONENT_ERROR', `Error in ${componentName}`, {\n      error: error.message,\n      stack: error.stack,\n      errorInfo: errorInfo === null || errorInfo === void 0 ? void 0 : errorInfo.componentStack\n    });\n  }\n\n  // Session management\n  getSessionId() {\n    let sessionId = sessionStorage.getItem('ielts_session_id');\n    if (!sessionId) {\n      sessionId = 'session_' + Date.now() + '_' + Math.random().toString(36).slice(2, 9);\n      sessionStorage.setItem('ielts_session_id', sessionId);\n    }\n    return sessionId;\n  }\n\n  // Export logs\n  exportLogs() {\n    const logsJson = JSON.stringify(this.logHistory, null, 2);\n    const blob = new Blob([logsJson], {\n      type: 'application/json'\n    });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `ielts-logs-${new Date().toISOString().split('T')[0]}.json`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n    this.info('LOGGER', 'Logs exported successfully');\n  }\n\n  // Get recent logs\n  getRecentLogs(count = 50) {\n    return this.logHistory.slice(-count);\n  }\n\n  // Clear logs\n  clearLogs() {\n    this.logHistory = [];\n    this.info('LOGGER', 'Logs cleared');\n  }\n\n  // Send error to external service (placeholder)\n  sendErrorToExternalService(logEntry) {\n    console.warn('Error logged for external service:', logEntry);\n  }\n\n  // Browser and environment info\n  logEnvironmentInfo() {\n    const envInfo = {\n      userAgent: navigator.userAgent,\n      language: navigator.language,\n      cookieEnabled: navigator.cookieEnabled,\n      onLine: navigator.onLine,\n      screenResolution: `${screen.width}x${screen.height}`,\n      viewportSize: `${window.innerWidth}x${window.innerHeight}`,\n      colorDepth: screen.colorDepth,\n      timezone: Intl.DateTimeFormat().resolvedOptions().timeZone,\n      url: window.location.href,\n      referrer: document.referrer || 'Direct'\n    };\n    this.info('ENVIRONMENT', 'Environment information captured', envInfo);\n    return envInfo;\n  }\n}\n\n// Create and export logger instance\nexport const logger = new Logger();\n\n// Global error handlers\nif (typeof window !== 'undefined') {\n  window.addEventListener('error', event => {\n    var _event$error;\n    logger.error('GLOBAL_ERROR', 'Uncaught error', {\n      message: event.message,\n      filename: event.filename,\n      lineno: event.lineno,\n      colno: event.colno,\n      error: (_event$error = event.error) === null || _event$error === void 0 ? void 0 : _event$error.stack\n    });\n  });\n  window.addEventListener('unhandledrejection', event => {\n    var _event$reason;\n    logger.error('PROMISE_REJECTION', 'Unhandled promise rejection', {\n      reason: event.reason,\n      stack: (_event$reason = event.reason) === null || _event$reason === void 0 ? void 0 : _event$reason.stack\n    });\n  });\n  document.addEventListener('visibilitychange', () => {\n    logger.logUserAction('page_visibility_change', {\n      hidden: document.hidden,\n      visibilityState: document.visibilityState\n    });\n  });\n}\nlogger.info('LOGGER', 'Logger service initialized');","map":{"version":3,"names":["Logger","constructor","logLevel","enableConsoleLog","logHistory","maxHistorySize","setLogLevel","level","log","category","message","data","timestamp","Date","toISOString","logEntry","userAgent","navigator","url","window","location","href","push","length","slice","logMessage","console","error","warn","info","debug","sendErrorToExternalService","startTimer","timerName","startTime","performance","now","stop","endTime","duration","toFixed","logUserAction","action","details","sessionId","getSessionId","logApiCall","method","status","requestData","responseData","JSON","stringify","logComponentEvent","componentName","event","logComponentError","errorInfo","stack","componentStack","sessionStorage","getItem","Math","random","toString","setItem","exportLogs","logsJson","blob","Blob","type","URL","createObjectURL","a","document","createElement","download","split","body","appendChild","click","removeChild","revokeObjectURL","getRecentLogs","count","clearLogs","logEnvironmentInfo","envInfo","language","cookieEnabled","onLine","screenResolution","screen","width","height","viewportSize","innerWidth","innerHeight","colorDepth","timezone","Intl","DateTimeFormat","resolvedOptions","timeZone","referrer","logger","addEventListener","_event$error","filename","lineno","colno","_event$reason","reason","hidden","visibilityState"],"sources":["/Users/abdulazim/Documents/web_stuff/real-projects/ielts_result/src/services/logger.js"],"sourcesContent":["// Logger service for React app\nclass Logger {\n    constructor() {\n        this.logLevel = 'INFO';\n        this.enableConsoleLog = true;\n        this.logHistory = [];\n        this.maxHistorySize = 1000;\n    }\n\n    setLogLevel(level) {\n        this.logLevel = level;\n        this.log('INFO', 'Logger', `Log level set to: ${level}`);\n    }\n\n    log(level, category, message, data = null) {\n        const timestamp = new Date().toISOString();\n        const logEntry = {\n            timestamp,\n            level,\n            category,\n            message,\n            data,\n            userAgent: navigator.userAgent,\n            url: window.location.href\n        };\n\n        // Add to history\n        this.logHistory.push(logEntry);\n        if (this.logHistory.length > this.maxHistorySize) {\n            this.logHistory = this.logHistory.slice(-this.maxHistorySize);\n        }\n\n        // Console logging\n        if (this.enableConsoleLog) {\n            const logMessage = `[${timestamp}] [${level}] [${category}] ${message}`;\n            \n            switch (level) {\n                case 'ERROR':\n                    console.error(logMessage, data || '');\n                    break;\n                case 'WARN':\n                    console.warn(logMessage, data || '');\n                    break;\n                case 'INFO':\n                    console.info(logMessage, data || '');\n                    break;\n                case 'DEBUG':\n                    console.debug(logMessage, data || '');\n                    break;\n                default:\n                    console.log(logMessage, data || '');\n            }\n        }\n\n        // Send critical errors to external service (if configured)\n        if (level === 'ERROR') {\n            this.sendErrorToExternalService(logEntry);\n        }\n    }\n\n    info(category, message, data = null) {\n        this.log('INFO', category, message, data);\n    }\n\n    warn(category, message, data = null) {\n        this.log('WARN', category, message, data);\n    }\n\n    error(category, message, data = null) {\n        this.log('ERROR', category, message, data);\n    }\n\n    debug(category, message, data = null) {\n        this.log('DEBUG', category, message, data);\n    }\n\n    // Performance logging\n    startTimer(timerName) {\n        const startTime = performance.now();\n        this.info('PERFORMANCE', `Timer started: ${timerName}`, { startTime });\n        return {\n            stop: () => {\n                const endTime = performance.now();\n                const duration = endTime - startTime;\n                this.info('PERFORMANCE', `Timer stopped: ${timerName}`, {\n                    startTime,\n                    endTime,\n                    duration: `${duration.toFixed(2)}ms`\n                });\n                return duration;\n            }\n        };\n    }\n\n    // User interaction logging\n    logUserAction(action, details = {}) {\n        this.info('USER_ACTION', action, {\n            ...details,\n            timestamp: Date.now(),\n            sessionId: this.getSessionId()\n        });\n    }\n\n    // API call logging\n    logApiCall(method, url, status, duration, requestData = null, responseData = null) {\n        const level = status >= 400 ? 'ERROR' : 'INFO';\n        this.log(level, 'API_CALL', `${method} ${url} - ${status}`, {\n            method,\n            url,\n            status,\n            duration: `${duration}ms`,\n            requestData: requestData ? JSON.stringify(requestData).slice(0, 500) : null,\n            responseData: responseData ? JSON.stringify(responseData).slice(0, 500) : null\n        });\n    }\n\n    // Component lifecycle logging\n    logComponentEvent(componentName, event, data = {}) {\n        this.debug('COMPONENT', `${componentName}: ${event}`, data);\n    }\n\n    // Error boundary logging\n    logComponentError(componentName, error, errorInfo) {\n        this.error('COMPONENT_ERROR', `Error in ${componentName}`, {\n            error: error.message,\n            stack: error.stack,\n            errorInfo: errorInfo?.componentStack\n        });\n    }\n\n    // Session management\n    getSessionId() {\n        let sessionId = sessionStorage.getItem('ielts_session_id');\n        if (!sessionId) {\n            sessionId = 'session_' + Date.now() + '_' + Math.random().toString(36).slice(2, 9);\n            sessionStorage.setItem('ielts_session_id', sessionId);\n        }\n        return sessionId;\n    }\n\n    // Export logs\n    exportLogs() {\n        const logsJson = JSON.stringify(this.logHistory, null, 2);\n        const blob = new Blob([logsJson], { type: 'application/json' });\n        const url = URL.createObjectURL(blob);\n        const a = document.createElement('a');\n        a.href = url;\n        a.download = `ielts-logs-${new Date().toISOString().split('T')[0]}.json`;\n        document.body.appendChild(a);\n        a.click();\n        document.body.removeChild(a);\n        URL.revokeObjectURL(url);\n        \n        this.info('LOGGER', 'Logs exported successfully');\n    }\n\n    // Get recent logs\n    getRecentLogs(count = 50) {\n        return this.logHistory.slice(-count);\n    }\n\n    // Clear logs\n    clearLogs() {\n        this.logHistory = [];\n        this.info('LOGGER', 'Logs cleared');\n    }\n\n    // Send error to external service (placeholder)\n    sendErrorToExternalService(logEntry) {\n        console.warn('Error logged for external service:', logEntry);\n    }\n\n    // Browser and environment info\n    logEnvironmentInfo() {\n        const envInfo = {\n            userAgent: navigator.userAgent,\n            language: navigator.language,\n            cookieEnabled: navigator.cookieEnabled,\n            onLine: navigator.onLine,\n            screenResolution: `${screen.width}x${screen.height}`,\n            viewportSize: `${window.innerWidth}x${window.innerHeight}`,\n            colorDepth: screen.colorDepth,\n            timezone: Intl.DateTimeFormat().resolvedOptions().timeZone,\n            url: window.location.href,\n            referrer: document.referrer || 'Direct'\n        };\n        \n        this.info('ENVIRONMENT', 'Environment information captured', envInfo);\n        return envInfo;\n    }\n}\n\n// Create and export logger instance\nexport const logger = new Logger();\n\n// Global error handlers\nif (typeof window !== 'undefined') {\n    window.addEventListener('error', (event) => {\n        logger.error('GLOBAL_ERROR', 'Uncaught error', {\n            message: event.message,\n            filename: event.filename,\n            lineno: event.lineno,\n            colno: event.colno,\n            error: event.error?.stack\n        });\n    });\n\n    window.addEventListener('unhandledrejection', (event) => {\n        logger.error('PROMISE_REJECTION', 'Unhandled promise rejection', {\n            reason: event.reason,\n            stack: event.reason?.stack\n        });\n    });\n\n    document.addEventListener('visibilitychange', () => {\n        logger.logUserAction('page_visibility_change', {\n            hidden: document.hidden,\n            visibilityState: document.visibilityState\n        });\n    });\n}\n\nlogger.info('LOGGER', 'Logger service initialized');"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}